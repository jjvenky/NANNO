#' Two Part Figure Function
#'
#' This function takes model simulations and plots them with 3 concentrations (NO3-, TAN, DIN) on one row and isotopes on another.
#' @param ysim Model simulations
#' @keywords
#' @export
#' @examples
#' two_part_figure(ysim)

two_part_figure <- function(ysim){
  g.top <- ggplot(melt(subset(ysim, select = c(time, NO3, TAN, DIN)), id.vars = "time"), aes(x = time, y = value, colour = variable)) + 
    geom_line(size = 1) +
    labs(x = "", y = "Concentration (mgN/L)", colour = "") + 
    theme(legend.position = "none", legend.box = "horizontal") +
    scale_y_continuous(limits = c(0, 15)) + 
    scale_colour_discrete(labels = c(expression(NO[3]^"-"), expression(TAN), expression(DIN)))
  g.bottom <- ggplot(melt(subset(ysim, select = c(time, deltaNO3, deltaTAN, deltaDIN)), id.vars = "time"), aes(x = time, y = value, colour = variable)) + 
    geom_line(size = 1) +
    labs(x = "Distance (m)", y = "δ¹⁵N (‰ vs air)", colour = "") + 
    theme(legend.position = "bottom", legend.box = "horizontal") + 
    scale_y_continuous(limits = c(0, 40)) + 
    scale_colour_discrete(labels = c(expression(NO[3]^"-"), expression(TAN), expression(DIN)))
  g.all <- grid.arrange(g.top,g.bottom, heights = c(0.5, 0.5))
  return(g.all)
}
##########

#' Two Part Figure Function with All Stocks
#'
#' This function takes model simulations and plots them with all 5 concentrations (NO2- NO3-, TAN, N2O, DIN) on one row and isotopes on another.
#' @param ysim Model simulations
#' @keywords
#' @export
#' @examples
#' two_part_figure(ysim)

two_part_figure_all <- function(ysim){
  g.top <- ggplot(melt(subset(ysim, select = c(time, NO2, NO3, TAN, N2O, DIN)), id.vars = "time"), aes(x = time, y = value, colour = variable)) + 
    geom_line(size = 1) +
    labs(x = "", y = "Concentration (mgN/L)", colour = "") + 
    theme(legend.position = "none", legend.box = "horizontal") +
    scale_y_continuous(limits = c(0, 25)) + 
    scale_colour_discrete(labels = c(expression(NO[2]^"-"), expression(NO[3]^"-"), expression(TAN), expression(N[2]*O), expression(DIN)))
  g.bottom <- ggplot(melt(subset(ysim, select = c(time, deltaNO2, deltaNO3, deltaTAN, deltaN2O, deltaDIN)), id.vars = "time"), aes(x = time, y = value, colour = variable)) + 
    geom_line(size = 1) +
    labs(x = "Distance (m)", y = "δ¹⁵N (‰ vs air)", colour = "") + 
    theme(legend.position = "bottom", legend.box = "horizontal") + 
    scale_y_continuous(limits = c(-21, 40)) + 
    scale_colour_discrete(labels = c(expression(NO[2]^"-"), expression(NO[3]^"-"), expression(TAN), expression(N[2]*O), expression(DIN)))
  g.all <- grid.arrange(g.top,g.bottom, heights = c(0.5, 0.5))
  return(g.all)
}
##########

#' Two Part Figure with Observations Function
#'
#' This function takes model simulations and observations and plots them with concentrations on one row and isotopes on another.
#' @param ysim Model simulations
#' @param yobs Field observations
#' @keywords
#' @export
#' @examples
#' two_part_figure_with_obs(ysim, yobs)

two_part_figure_with_obs <- function(ysim, yobs){
  g.top <- ggplot(melt(subset(ysim, select = c(time, NO3, TAN, DIN)), id.vars = "time"), aes(x = time, y = value, colour = variable)) + 
    geom_line(size = 1) +
    geom_point(data = melt(subset(rename(cbind(obstime, yobs), c(obstime = "time")), select = c(time, NO3, TAN, DIN)), id.vars = "time"), size = 4) +
    labs(x = "", y = "Concentration (mgN/L)", colour = "") + 
    theme(legend.position = "none", legend.box = "horizontal") +
    scale_y_continuous(limits = c(0, max(yobs$TAN, rm.na = TRUE)+1)) + 
    scale_colour_discrete(labels = c(expression(NO[3]^"-"), expression(TAN), expression(DIN)))
  g.bottom <- ggplot(melt(subset(ysim, select = c(time, deltaNO3, deltaTAN, deltaDIN)), id.vars = "time"), aes(x = time, y = value, colour = variable)) + 
    geom_line(size = 1) +
    geom_point(data = melt(subset(rename(cbind(obstime, yobs), c(obstime = "time")), select = c(time, deltaNO3, deltaTAN, deltaDIN)), id.vars = "time"), size = 4) +
    labs(x = "Distance (m)", y = "δ¹⁵N (‰ vs air)", colour = "") + 
    theme(legend.position = "bottom", legend.box = "horizontal") + 
    scale_y_continuous(limits = c(0, 40)) + 
    scale_colour_discrete(labels = c( expression(NO[3]^"-"), expression(TAN), expression(DIN)))
  g.all <- grid.arrange(g.top,g.bottom, heights = c(0.5, 0.5))
  return(g.all)
}
###########
